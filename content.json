{"meta":{"title":"Blog","subtitle":"","description":"","author":"Li","url":"https://xy1ona.github.io","root":"/"},"pages":[{"title":"分类","date":"2022-04-08T09:13:57.274Z","updated":"2022-04-08T09:13:57.274Z","comments":false,"path":"categories/index.html","permalink":"https://xy1ona.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2022-04-08T09:13:57.271Z","updated":"2022-04-08T09:13:57.271Z","comments":false,"path":"/404.html","permalink":"https://xy1ona.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-04-08T09:13:57.273Z","updated":"2022-04-08T09:13:57.273Z","comments":false,"path":"about/index.html","permalink":"https://xy1ona.github.io/about/index.html","excerpt":"","text":"喜欢吃饭睡觉"},{"title":"友情链接","date":"2022-04-08T09:13:57.274Z","updated":"2022-04-08T09:13:57.274Z","comments":true,"path":"links/index.html","permalink":"https://xy1ona.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-04-08T09:13:57.273Z","updated":"2022-04-08T09:13:57.273Z","comments":false,"path":"books/index.html","permalink":"https://xy1ona.github.io/books/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-04-08T09:13:57.274Z","updated":"2022-04-08T09:13:57.274Z","comments":false,"path":"repository/index.html","permalink":"https://xy1ona.github.io/repository/index.html","excerpt":"","text":""},{"title":"电影","date":"2022-04-08T09:13:57.274Z","updated":"2022-04-08T09:13:57.274Z","comments":false,"path":"movies/index.html","permalink":"https://xy1ona.github.io/movies/index.html","excerpt":"","text":"建设中…"},{"title":"标签","date":"2022-04-08T09:13:57.275Z","updated":"2022-04-08T09:13:57.275Z","comments":false,"path":"tags/index.html","permalink":"https://xy1ona.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Koa2 + Mysql 搭建后端服务器","slug":"003 入门Koa2框架 + Mysql","date":"2022-05-07T08:26:02.000Z","updated":"2022-05-13T09:53:12.716Z","comments":true,"path":"2022/05/07/003 入门Koa2框架 + Mysql/","link":"","permalink":"https://xy1ona.github.io/2022/05/07/003%20%E5%85%A5%E9%97%A8Koa2%E6%A1%86%E6%9E%B6%20+%20Mysql/","excerpt":"","text":"Koa2Koa – 基于 Node.js 平台的下一代 web 开发框架。 koa2是由 Express 原班人马打造的，express是大而全，内置了大多数的中间件，Koa2不与任何中间件捆绑在一起，体积很小，但是扩展性很强，抛弃了callback回调函数，使用Promise并配合async来实现异步。 一、Koa2安装创建一个空白目录，在终端中执行以下命令： 123456# 项目初始化$ npm init -y# 安装koa2$ npm i koa2 -S# 安装nodemon$ npm i nodemon -D 项目整体目录一览？二、入口文件在package.json 里配置启动命令： 123456&#123; &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;start&quot;: &quot;nodemon app.js&quot; &#125;,&#125; 在项目根目录创建 utils.js文件，方便对一些公用的配置、方法管理，在 utils.js 中： 12345678// 生产环境域名：http://xxx.com，开发环境域名：http://localhostconst host = &#x27;http://127.0.0.1&#x27;// 生产环境端口：自定义，开发环境端口：9000const port = 9000;module.exports = &#123; host, port&#125; 在项目根目录创建 app.js文件，在 app.js 中： 1234567891011121314151617// node项目基本都是使用require引入const Koa = require(&#x27;koa2&#x27;);const app = new Koa();const &#123;host, port&#125; = require(&quot;./utils&quot;)/* app.use()方法是：将给定的中间件方法添加到此应用程序。简单说就是调用中间件app.use() 返回 this, 因此可以链式表达*/app.use(async (ctx)=&gt;&#123; ctx.body = &quot;Hello, Koa&quot;; // ctx.body是ctx.response.body的简写&#125;)app.listen(port, ()=&gt;&#123; console.log(`Server is running at $&#123;host&#125;:$&#123;port&#125;`)&#125;) 运行 npm run start ，并在浏览器输入 http://127.0.0.1:9000/ 即可看到页面效果。 三、路由安装1$ npm i koa-router 在 app.js 修改： 12345678910111213141516171819202122232425const Koa = require(&#x27;koa2&#x27;);const Router = require(&#x27;koa-router&#x27;);const app = new Koa();const router = new Router();const &#123;host, port&#125; = require(&quot;./utils&quot;)router.get(&#x27;/&#x27;, async (ctx)=&gt;&#123; ctx.body = &quot;根路径&quot;;&#125;)router.get(&#x27;/manage&#x27;, async (ctx)=&gt;&#123; ctx.body = &quot;管理系统&quot;;&#125;)// 调用router.routes()来组装匹配好的路由，返回一个合并好的中间件// 调用router.allowedMethods()获得一个中间件，当发送了不符合的请求时，会返回 `405 Method Not Allowed` 或 `501 Not Implemented`app.use(router.routes(), router.allowedMethods(&#123; // throw: true, // 抛出错误，代替设置响应头状态 // notImplemented: () =&gt; &#x27;不支持当前请求所需要的功能&#x27;, // methodNotAllowed: () =&gt; &#x27;不支持的请求方式&#x27;&#125;));app.listen(port, ()=&gt;&#123; console.log(`Server is running at $&#123;host&#125;:$&#123;port&#125;`)&#125;) 到浏览器刷新并在地址栏最后添加 /manage 即可得到根路径内容和列表模块内容。 四、路由拆分当项目较大，路由较多时，我们需要划分模块。此时，就需要对路由进行拆分。这个项目的后端要服务于Web官网和后台管理系统，因此我们将路由划分成两个模块：web与manage。 1，创建 router 文件夹创建router文件夹，并在其中创建：index.js （路由总入口文件）、manage/index.js （manage模块路由入口文件）、web/index.js （web模块路由入口文件）： 123456789101112// app.jsconst Koa = require(&quot;koa2&quot;);const router = require(&quot;./router&quot;)const app = new Koa();const port = 9000;// 调用router中间件app.use(router.routes(), router.allowedMethods());app.listen(port, ()=&gt;&#123; console.log(`Server is running at http://localhost:$&#123;port&#125;`);&#125;) 1234567891011121314// index.jsconst Router = require(&quot;koa-router&quot;);const manage = require(&quot;./manage&quot;);const web = require(&quot;./web&quot;);const router = new Router();router.get(&quot;/&quot;, async ctx=&gt;&#123; ctx.body = &quot;根路径&quot;&#125;)router.use(&quot;/manage&quot;, manage.routes(), manage.allowedMethods());router.use(&quot;/web&quot;, web.routes(), web.allowedMethods());module.exports = router; 123456789// manage/index.jsconst Router = require(&quot;koa-router&quot;)const router = new Router();router.get(&#x27;/&#x27;, async ctx=&gt;&#123; ctx.body = &quot;管理系统&quot;&#125;)module.exports = router; 123456789// web/index.jsconst Router = require(&quot;koa-router&quot;)const router = new Router();router.get(&#x27;/&#x27;, async ctx=&gt;&#123; ctx.body = &quot;官网&quot;&#125;)module.exports = router; 到浏览器刷新 http://127.0.0.1:9000/manage 与 http://127.0.0.1:9000/web 即可得到manage和web两个模块返回的数据 2、路由重定向如果直接从 localhost:9000 重定向到 localhost:9000/home，在 router/index.js 中做如下配置： 123router.use(&#x27;/home&#x27;, home.routes(), home.allowedMethods());...router.redirect(&#x27;/&#x27;, &#x27;/home&#x27;); 3、404无效路由如果被访问到无效路由，那么我们可以统一返回404页面：在 router 下 errorPage.js : 12345678const Router = require(&#x27;koa-router&#x27;);const errorPage = new Router();errorPage.get(&#x27;/&#x27;, async (ctx) =&gt; &#123; ctx.body = &quot;访问页面不存在&quot;;&#125;)module.exports = errorPage; 在 router/index.js 中： 1234const errorPage = require(&quot;./errorPage&quot;)// 404页面路由router.use(&quot;/404&quot;, errorPage.routes(), errorPage.allowedMethods()); 在 app.js 中引用： 12345678// 匹配不到页面的全部跳转去404app.use(async (ctx, next) =&gt; &#123; await next(); if (parseInt(ctx.status) === 404) &#123; ctx.response.redirect(&quot;/404&quot;) &#125;&#125;)app.use(router.routes(), router.allowedMethods()); 五、后端允许跨域12# 安装koa2-cors$ npm i koa2-cors app.js中： 1234// 引入koa2-cors中间件const cors = require(&quot;koa2-cors&quot;);// cors中间件一定要写在路由之前app.use(cors()); 六、读取静态资源文件12# 安装koa-static$ npm i koa-static 根目录下创建 assets/images文件夹，假定404页面需要返回一张错误警告图 app.js中： 12345// 引入koa-static中间件const static = require(&quot;koa-static&quot;);// 读取静态资源中间件一定要写在路由之前// 在页面中读取404.png - http://127.0.0.1:9000/images/404.pngapp.use(static(path.join(__dirname, &#x27;/static&#x27;))) MySQLMySQL安装","categories":[],"tags":[{"name":"Koa2","slug":"Koa2","permalink":"https://xy1ona.github.io/tags/Koa2/"},{"name":"Mysql","slug":"Mysql","permalink":"https://xy1ona.github.io/tags/Mysql/"}]},{"title":"Github + Hexo 搭建个人博客","slug":"001 Github + Hexo 搭建个人博客","date":"2022-04-08T09:13:57.272Z","updated":"2022-05-07T09:24:47.681Z","comments":true,"path":"2022/04/08/001 Github + Hexo 搭建个人博客/","link":"","permalink":"https://xy1ona.github.io/2022/04/08/001%20Github%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"什么是Hexo?Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 或其他渲染引擎解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 什么是GitHub Pages？可以使用GitHub页面直接从GitHub上的存储库托管关于你自己、组织或项目的网站。About GitHub Pages 搭建步骤一、GitHub创建个人仓库1、申请Github账号，使用你的邮箱注册2、New repository创建新仓库（注意：仓库名和用户名相同，后面加.github.io，例如：用户名：xxx，仓库名：xxx.github.io，这样部署到GitHub Pages才会被识别） 二、安装Node.js和Git Node.js下载地址 Git下载地址 下载按照默认步骤安装，安装成功后，将你的Git与GitHub帐号绑定。 三、安装Hexo使用 npm 安装1$ npm install -g hexo 在指定文件夹中新建所需要的文件123$ hexo init &lt;folder&gt; #新建一个网站$ cd &lt;folder&gt;$ npm install 新建一篇文章1$ hexo new [layout] &lt;title&gt; 启动本地服务器进行预览12hexo g #generate 生成静态文件hexo s #server 启动服务器 默认情况下，访问网址为： http://localhost:4000/ ，出现Hexo默认页面，本地博客安装成功！ 四、部署Hexo到Github安装 hexo-deployer-git 自动部署发布工具1$ npm install --save hexo-deployer-git 配置 _config.yml12345# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: 仓库地址 发布到Github第一次发布需要验证github账号 123$ hexo clean #清除文件缓存$ hexo g #generate 生成静态文件$ hexo d #deploy 部署发布 访问网址为： xxx.github.io 注意： 必须把 repository visibility 权限设为 Public （免费用户必须公开repository网站才能被访问，试了设成private直接404。）More info: Github","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xy1ona.github.io/tags/hexo/"}]},{"title":"VMware + CentOS + Nginx安装 + 部署Vue项目","slug":"VMware + CentOS + Nginx安装 + 部署Vue项目","date":"2022-04-07T07:37:39.000Z","updated":"2022-04-08T09:13:57.273Z","comments":true,"path":"2022/04/07/VMware + CentOS + Nginx安装 + 部署Vue项目/","link":"","permalink":"https://xy1ona.github.io/2022/04/07/VMware%20+%20CentOS%20+%20Nginx%E5%AE%89%E8%A3%85%20+%20%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"VMware下载 VMware Workstation官网 ，下载试用版， 选择 Workstation 16 Pro for Windows VMware安装 打开下载好的.exe文件，一直点击 下一步（安装位置可以根据自己的情况进行更改） 等待软件安装完成； 安装成功后，【许可证】输入密钥（密钥可以在百度上搜索）激活软件； 重启系统后进入软件，重启后才能生效。 下载镜像文件安装Linux之前需要先下载镜像文件（国内的镜像地址下载会比官网快点），这里我选择的是centos7，以下是国内的镜像地址： 中科大镜像站（地址：安徽）：http://mirrors.ustc.edu.cn 清华大学镜像站：http://mirrors.tuna.tsinghua.edu.cn 浙江大学镜像站：http://mirrors.zju.edu.cn 重庆大学镜像站：http://mirrors.cqu.edu.cn 兰州大学镜像站：http://mirror.lzu.edu.cn 创建虚拟机 创建新的虚拟机，选择典型； 安装程序光盘映像文件（iso）,选择电脑中的镜像光盘目录； 设置用户名，密码等信息； 客户机操作系统，选择Linux; 设置虚拟机名称和位置，指定磁盘容量，自定义硬件等； 安装成功之后就可以登录虚拟机，做其他操作。 Centos7 编译安装Nginx1，yum更新1$ yum -y update 2，安装Nginx 编译所需所有依赖项1$ yum -y install gcc gcc-c++ make zlib-devel pcre-devel openssl-devel 3，下载、解压nginx下载地址 123$ wget http://nginx.org/download/nginx-1.9.9.tar.gz # 下载nginx，centos7 下载命令$ tar -xzf nginx-1.9.15.tar.gz # 解压$ cd nginx-1.9.9 # 进入nginx-1.9.9.tar.gz 文件夹 4，选择安装的模块12345678910111213141516171819./configure \\--user=nginx \\--group=nginx \\--prefix=/etc/nginx \\--sbin-path=/usr/sbin/nginx \\--conf-path=/etc/nginx/nginx.conf \\--pid-path=/var/run/nginx.pid \\--lock-path=/var/run/nginx.lock \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--with-http_gzip_static_module \\--with-http_stub_status_module \\--with-http_ssl_module \\--with-pcre \\--with-file-aio \\--with-http_realip_module \\--without-http_scgi_module \\--without-http_uwsgi_module \\--without-http_fastcgi_module 5，执行编译、安装指令12$ make$ make install 6，配置Nginx123$ nginx -v #检查Nginx的版本$ nginx #启动Nginx$ ps -ef|grep nginx #检查Nginx是否正在运行 测试 Nginx 配置是否存在任何语法或系统错误 12$ su #输入密码，获得管理员权限$ nginx -t 输出 12nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 修改nginx.conf文件 1234567891011121314151617181920212223242526272829303132333435363738394041$ vim /etc/nginx/nginx.conf # 启动Vim，进入了命令模式# 按下i，切换到输入模式，开始写入nginx.conf的配置# 按下esc，切到命令模式# 输入:wq,退出vim并保存文件server &#123; listen 8080; # 监听的端口号 server_name # 服务名称 生产环境要修改成 公网ip 如 192.168.13.12 charset utf-8; # 配置默认的主页显示 location / &#123; root /home/app/demo/dist; try_files $uri $uri/ /index.html; index index.html index.htm; add_header Cache-Control no-cache; add_header Pragma no-cache; add_header Expires 0; # 设置某个文件不缓存读取本地，永远走200，拿到最新的 if ($request_filename ~* .*\\.(?:htm|html)$) &#123; add_header Cache-Control &quot;private, no-store, no-cache, must-revalidate, proxy-revalidate&quot;; &#125; &#125; # 配置子项目的主页显示 location /subapp &#123; root /home/app/demo/dist; index index.html index.htm; try_files $uri $uri/ /subapp/index.html; &#125; # 服务器反向代理 location /dev/&#123; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://xxx.xxx.xx.xxx:port/; &#125; &#125; 重启nginx 1$ nginx -s reload 停止nginx 1$ nginx -s stop 查看当前IP地址 1$ ifconfig #执行成功后可以看到Linux操作系统IP地址，然后在可以windows主机的浏览器访问 测试web service 1$ curl http://xxx.xxx.xx.xxx Nginx 部署 Vue 项目1，项目打包 1$ npm run build 2，把打包好的dist文件传到刚才nginx.conf文件配置的目录（root /home/app/demo/），这里我用的是xshell来上传文件。 3，访问项目 Linux操作系统IP地址:nginx.conf文件配置的项目端口号，如果http://xxx.xxx.xx.xxx:8080 参考文章： https://blog.csdn.net/qq_40950957/article/details/80467513 https://blog.csdn.net/qq_54132332/article/details/123816776 https://www.cnblogs.com/xingyunblog/p/9072553.html","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://xy1ona.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"待做事项","slug":"000 待做事项","date":"2022-03-14T08:57:52.000Z","updated":"2022-05-23T02:28:51.915Z","comments":true,"path":"2022/03/14/000 待做事项/","link":"","permalink":"https://xy1ona.github.io/2022/03/14/000%20%E5%BE%85%E5%81%9A%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"","categories":[],"tags":[{"name":"计划","slug":"计划","permalink":"https://xy1ona.github.io/tags/%E8%AE%A1%E5%88%92/"}]},{"title":"前端面试题随记","slug":"002 前端面试题随记","date":"2022-03-14T08:56:11.000Z","updated":"2022-04-08T09:13:57.272Z","comments":true,"path":"2022/03/14/002 前端面试题随记/","link":"","permalink":"https://xy1ona.github.io/2022/03/14/002%20%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9A%8F%E8%AE%B0/","excerpt":"","text":"","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://xy1ona.github.io/tags/%E9%9D%A2%E8%AF%95/"}]}],"categories":[],"tags":[{"name":"Koa2","slug":"Koa2","permalink":"https://xy1ona.github.io/tags/Koa2/"},{"name":"Mysql","slug":"Mysql","permalink":"https://xy1ona.github.io/tags/Mysql/"},{"name":"hexo","slug":"hexo","permalink":"https://xy1ona.github.io/tags/hexo/"},{"name":"服务器","slug":"服务器","permalink":"https://xy1ona.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"计划","slug":"计划","permalink":"https://xy1ona.github.io/tags/%E8%AE%A1%E5%88%92/"},{"name":"面试","slug":"面试","permalink":"https://xy1ona.github.io/tags/%E9%9D%A2%E8%AF%95/"}]}